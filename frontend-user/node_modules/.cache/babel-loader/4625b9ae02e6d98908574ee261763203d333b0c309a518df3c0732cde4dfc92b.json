{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"wrap\"\n};\nconst _hoisted_2 = {\n  class: \"left\"\n};\nconst _hoisted_3 = [\"config\"];\nconst _hoisted_4 = {\n  class: \"vue-time-slot-container\"\n};\nconst _hoisted_5 = {\n  class: \"vue-time-slot-table-row-header\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"vue-time-slot-column-header\"\n}, \"Time\", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"vue-time-slot-calendar-table\",\n  id: \"vue-time-slot-calendar-table\"\n};\nconst _hoisted_8 = {\n  class: \"vue-time-slot-column-header\"\n};\nconst _hoisted_9 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DayPilotNavigator = _resolveComponent(\"DayPilotNavigator\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_DayPilotNavigator, {\n    id: \"nav\",\n    config: _ctx.datePickerConfig,\n    ref: \"datePicker\",\n    events: _ctx.events\n  }, null, 8 /* PROPS */, [\"config\", \"events\"])]), _createCommentVNode(\"<div class=\\\"content\\\">\\r\\n            <DayPilotCalendar id=\\\"dp\\\" :config=\\\"calendarConfig\\\" ref=\\\"calendar\\\" :events=\\\"events\\\" />\\r\\n        </div>\"), _createElementVNode(\"div\", {\n    class: \"slot_picker\",\n    config: _ctx.slotPickerConfig\n  }, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_hoisted_6, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.slotRange, value => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      class: \"vue-time-slot-row-header\",\n      key: value.label\n    }, _toDisplayString(value.label), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.dayIndex, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"vue-time-slot-day-header\",\n      key: day.label\n    }, [_createElementVNode(\"span\", _hoisted_8, _toDisplayString(day.label), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.slotRange, value => {\n      return _openBlock(), _createElementBlock(\"span\", {\n        class: \"vue-time-slot-cell\",\n        key: value.label,\n        onClick: $event => $options.slot($event, value, day)\n      }, _toDisplayString(value.label), 9 /* TEXT, PROPS */, _hoisted_9);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\"\\r\\n    <div class=\\\"selection\\\" id=\\\"selection\\\">\\r\\n        <ul class=\\\"selected_slots\\\">\\r\\n          <li class=\\\"slots\\\" v-for=\\\"(slot, index) in selected_slots\\\" :key='index'>{{slot.value}} {{slot.label}}</li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    \")])], 8 /* PROPS */, _hoisted_3)]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAM;;EACRA,KAAK,EAAC;AAAM;;;EAShBA,KAAK,EAAC;AAAyB;;EAC7BA,KAAK,EAAC;AAAgC;gCACzCC,oBAAqD;EAA/CD,KAAK,EAAC;AAA6B,GAAC,MAAI;;EAK3CA,KAAK,EAAC,8BAA8B;EAACE,EAAE,EAAC;;;EAEnCF,KAAK,EAAC;AAA6B;;;;uBAnB/CG,oBAoCM,OApCNC,UAoCM,GAnCFH,oBAEM,OAFNI,UAEM,GADFC,aAA2FC;IAAxEL,EAAE,EAAC,KAAK;IAAEM,MAAM,EAAEC,qBAAgB;IAAEC,GAAG,EAAC,YAAY;IAAEC,MAAM,EAAEF;mDAErFG,6KAES,EAGTX,oBA0BA;IA1BKD,KAAK,EAAC,aAAa;IAAEQ,MAAM,EAAEC;MACtCR,oBAwBM,OAxBNY,UAwBM,GAvBJZ,oBAKM,OALNa,UAKM,GAJJC,UAAqD,qBACrDZ,oBAEOa,6BAFgDP,cAAS,EAAlBQ,KAAK;yBAAnDd,oBAEO;MAFDH,KAAK,EAAC,0BAA0B;MAA6BkB,GAAG,EAAED,KAAK,CAACE;wBAC1EF,KAAK,CAACE,KAAK;oCAGjBlB,oBAOM,OAPNmB,UAOM,sBANJjB,oBAKMa,6BAL8CP,aAAQ,EAAfY,GAAG;yBAAhDlB,oBAKM;MALDH,KAAK,EAAC,0BAA0B;MAA0BkB,GAAG,EAAEG,GAAG,CAACF;QACtElB,oBAA8D,QAA9DqB,UAA8D,mBAAlBD,GAAG,CAACF,KAAK,qCACrDhB,oBAEOa,6BAF0CP,cAAS,EAAlBQ,KAAK;2BAA7Cd,oBAEO;QAFDH,KAAK,EAAC,oBAAoB;QAA6BkB,GAAG,EAAED,KAAK,CAACE,KAAK;QAAGI,OAAK,YAAEC,aAAI,CAACC,MAAM,EAAER,KAAK,EAAEI,GAAG;0BAC1GJ,KAAK,CAACE,KAAK;;oCAIzBP,sRAMO","names":["class","_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_DayPilotNavigator","config","_ctx","ref","events","_createCommentVNode","_hoisted_4","_hoisted_5","_hoisted_6","_Fragment","value","key","label","_hoisted_7","day","_hoisted_8","onClick","$options","$event"],"sourceRoot":"","sources":["D:\\SED\\GroupProject\\DoctorToday\\frontend-user\\src\\components\\AvailabilityPicker.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n        <div class=\"left\">\r\n            <DayPilotNavigator id=\"nav\" :config=\"datePickerConfig\" ref=\"datePicker\" :events=\"events\" />\r\n        </div>\r\n        <!--<div class=\"content\">\r\n            <DayPilotCalendar id=\"dp\" :config=\"calendarConfig\" ref=\"calendar\" :events=\"events\" />\r\n        </div>-->\r\n        \r\n\r\n        <div class=\"slot_picker\" :config=\"slotPickerConfig\">\r\n    <div class=\"vue-time-slot-container\">\r\n      <div class=\"vue-time-slot-table-row-header\">\r\n        <span class=\"vue-time-slot-column-header\">Time</span>\r\n        <span class=\"vue-time-slot-row-header\" v-for=\"value in slotRange\" :key=\"value.label\">\r\n          {{value.label}}\r\n        </span>\r\n      </div>\r\n      <div class=\"vue-time-slot-calendar-table\" id=\"vue-time-slot-calendar-table\">\r\n        <div class=\"vue-time-slot-day-header\" v-for=\"day in dayIndex\" :key=\"day.label\">\r\n          <span class=\"vue-time-slot-column-header\">{{day.label}}</span>\r\n          <span class=\"vue-time-slot-cell\" v-for=\"value in slotRange\" :key=\"value.label\" @click=\"slot($event, value, day)\">\r\n            {{value.label}} \r\n          </span>\r\n        </div>\r\n      </div>\r\n<!--\r\n    <div class=\"selection\" id=\"selection\">\r\n        <ul class=\"selected_slots\">\r\n          <li class=\"slots\" v-for=\"(slot, index) in selected_slots\" :key='index'>{{slot.value}} {{slot.label}}</li>\r\n        </ul>\r\n      </div>\r\n    -->\r\n      \r\n\r\n    </div>\r\n  </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { DayPilot, DayPilotNavigator } from '@daypilot/daypilot-lite-vue'\r\n\r\n\r\nlet selected_slots_count = 0;\r\nlet selection_count = 0;\r\n//let lastDate = null;\r\n\r\nexport default {\r\n    name: 'AvailabilityPicker',\r\n    props: {\r\n    min: {\r\n      type: Number,\r\n      default: 3\r\n    }\r\n  },\r\n  watch: {},\r\n\r\n    data: function () {\r\n        return {\r\n            events: [],\r\n            datePickerConfig: {\r\n                showMonths: 1,\r\n                skipMonths: 1,\r\n                // \"Day\" highlights the selected day\r\n                // \"Week\" highlights the week of the selected day\r\n                selectMode: \"Day\",\r\n                startDate: DayPilot.Date.today(),\r\n                selectionDay: DayPilot.Date.today(),\r\n                onTimeRangeSelected: args => {\r\n                  this.datePickerConfig.selectionDay = args.day;\r\n                    // get selected day from navigator\r\n                    if (args.day >= DayPilot.Date.today()) {\r\n                        this.calendarConfig.startDate = args.day;\r\n                    }\r\n                },\r\n                \r\n                \r\n                //need to block past days\r\n                /*\r\n                onTimeRangeSelect: args => {\r\n                    if (args.day < DayPilot.Date.today()) {\r\n                        args.preventDefault();\r\n                        //this.select(lastDate, {dontNotify: true, dontFocus: true});\r\n                    } else {\r\n                        lastDate = args.start;\r\n                    }\r\n                },\r\n                */\r\n                onBeforeCellRender: args=> {\r\n                    //console.log(args.cell.day);\r\n                    if (args.cell.day < DayPilot.Date.today()) {\r\n                        args.cell.cssClass = \"navigator-disabled-cell\";\r\n                    }\r\n                },\r\n                \r\n                \r\n\r\n            },\r\n\r\n            \r\n            duration: 30, // only 10, 15, 20, 30 allowed\r\n            open: 10, // set openning hours\r\n            close: 18,      \r\n            slotRange: [/*\r\n            {\r\n            label: \"13:40 - 14:00\",\r\n            start_time: \"13:40:00\",\r\n            end_time: \"14:00:00\"\r\n            },*/\r\n            ],\r\n            dayIndex: [],\r\n            todaysDate: this.formatDate(new Date(), \"long\"),\r\n            dateIndex: 0,\r\n            selected_slots: [],\r\n            \r\n\r\n        }\r\n    },\r\n    \r\n\r\n    components: {\r\n        //DayPilotCalendar,\r\n        DayPilotNavigator\r\n    },\r\n\r\n\r\n    computed: {\r\n        // DayPilot.Calendar object - https://api.daypilot.org/daypilot-calendar-class/\r\n       /* calendar() {\r\n            return this.$refs.calendar.control;\r\n        },\r\n        */\r\n        datePicker() {\r\n            return this.$refs.datePicker.control;\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        loadEvents() {\r\n            // placeholder for an HTTP call\r\n            /*\r\n            const busy = [\r\n                {\r\n                    id: 1,\r\n                    start: \"2023-01-05T10:00:00\",\r\n                    end: \"2023-01-05T11:00:00\",\r\n                    text: \"busy\",\r\n                    barColor: \"#6aa84f\",\r\n                },\r\n\r\n            ];\r\n            this.events = busy;\r\n            */ \r\n        },\r\n        formatDate(date, type) {\r\n      let monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n      ];\r\n      var day = date.getDate();\r\n      var monthIndex = date.getMonth();\r\n      let month =\r\n        type == \"short\"\r\n          ? monthNames[monthIndex].slice(0, 3)\r\n          : monthNames[monthIndex];\r\n      return {\r\n        label: date.toString().slice(0, 3) + \" \" + month + \" \" + day,\r\n        value: date.toString().slice(0, 16),\r\n      };\r\n    },\r\n    addDate() {\r\n      this.dayIndex.push(\r\n        this.formatDate(this.nextDate(this.dateIndex), \"short\")\r\n      );\r\n      this.dateIndex++;\r\n    },\r\n    nextDate(index) {\r\n      let year = this.datePickerConfig.selectionDay.toString().slice(0, 4);\r\n      let month = this.datePickerConfig.selectionDay.toString().slice(5, 7);\r\n      let day = this.datePickerConfig.selectionDay.toString().slice(8, 10);\r\n      let selected_date = new Date();\r\n      selected_date.setFullYear(year, month, day);\r\n      return new Date(selected_date.getTime() + index * 24 * 60 * 60 * 1000);\r\n    },\r\n    slot(event, value, day) {\r\n      // select up to three slots\r\n      // unselect a slot by clicking it\r\n      if (event.target.classList[1] != \"vue-time-slot-active-cell\" && selection_count <=2) {\r\n        selection_count++;\r\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\r\n        value.date = day.value;\r\n        this.$emit(\"callback\", value);\r\n        let slot = {label: value.label, value: value.date};\r\n        this.addSlot(slot);\r\n        return;\r\n      } \r\n      if (event.target.classList[1] == \"vue-time-slot-active-cell\") {\r\n        selection_count--;\r\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\r\n        value.date = day.value;\r\n        this.$emit(\"callback\", value);\r\n        let slot = {label: value.label, value: value.date};\r\n        this.removeSlot(slot);\r\n      }\r\n    },\r\n    initSlotRange() {\r\n    // initialise dateRange with a duration of 20 min\r\n      let start = \"\";\r\n      let end = \"\";\r\n    \r\n      for (let hour = this.open; hour < this.close; hour++) {\r\n        for (let min = 0; min <60; min += this.duration) {\r\n          start = end;\r\n          if(min != 0) {\r\n            end = hour + \":\" + min;\r\n          } else {\r\n            end = hour + \":0\" + min\r\n          }\r\n          let label = start + \" - \" + end;\r\n          let start_time = start + \":00\";\r\n          let end_time = end + \":00\";\r\n          let range = {label, start_time, end_time};\r\n          if (start != \"\") {\r\n            this.slotRange.push(range);\r\n          }\r\n        }\r\n      }\r\n      start = end;\r\n      end = this.close + \":00\";\r\n      let label = start + \" - \" + end;\r\n      let start_time = start + \":00\";\r\n      let end_time = end + \":00\";\r\n      let range = {label, start_time, end_time};\r\n      this.slotRange.push(range);\r\n    },\r\n    addSlot(slot) {\r\n      this.selected_slots.push(slot);\r\n    },\r\n    removeSlot(slot) {\r\n    // get all slot data and then get index of selected slot in list\r\n    let items = document.querySelectorAll(\".slots\");\r\n    let item = [];\r\n    for (let i = 0; i < items.length; i++) {\r\n      item.push(items[i].innerHTML);\r\n    }\r\n    let slot_info = slot.value + \" \" + slot.label;\r\n    let index = item.indexOf(slot_info);\r\n    this.selected_slots.splice(index, 1);\r\n    },\r\n    /*\r\n    blockSlot() {\r\n\r\n    }\r\n    */\r\n\r\n\r\n\r\n    },\r\n    mounted() {\r\n        this.loadEvents();\r\n        //2023-01-26T00:00:00'\r\n\r\n    //let todaysDate = new Date(new Date().getTime() + 0 * 24 * 60 * 60 * 1000);\r\n        for (let index = 0; index < this.min; index++) {\r\n      this.dayIndex.push(\r\n        this.formatDate(this.nextDate(this.dateIndex), \"short\")\r\n      );\r\n      this.dateIndex++;\r\n    }\r\n\r\n    this.initSlotRange();\r\n    console.log(DayPilot.Date.today());\r\n    //this.blockSlot();\r\n\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.wrap {\r\n    display: flex;\r\n}\r\n.left {\r\n    margin-right: 10px;\r\n}\r\n\r\n.content {\r\n    flex-grow: 1;\r\n}\r\n/*\r\n.calendar_default_event_inner {\r\n    border-radius: 5px;\r\n}\r\n*/\r\n.navigator_default_busy.navigator_default_cell {\r\n    background-color: #ee4f2e;\r\n    border-radius: 15px;\r\n    color: white;\r\n}\r\n\r\n.navigator_default_select {\r\n    color: white;\r\n}\r\n.navigator_default_select .navigator_default_cell_box {\r\n    background-color: rgb(3, 105, 161);\r\n    border-radius: 50%;\r\n    opacity: 1;\r\n}\r\n\r\n.navigator_default_todaybox {\r\n    border: 2px solid rgb(3, 105, 161);\r\n    border-radius: 50%;\r\n}\r\n\r\n.navigator_default_title, .navigator_default_titleleft, .navigator_default_titleright {\r\n    background-color: rgb(3, 105, 161);\r\n    color: white;\r\n    font-size: 110%;\r\n}\r\n.navigator_default_cell.navigator-disabled-cell {\r\n  background-color: #ddd !important;\r\n  color: #888;\r\n  cursor: not-allowed !important;\r\n}\r\n\r\n.vue-time-slot-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  font-size: 13px;\r\n  padding-left: 50px;\r\n}\r\n.vue-time-slot-row-header {\r\n  border: none !important;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  background-color: #ccc;\r\n  font-size: 12px;\r\n  padding: 7px;\r\n  color: #000;\r\n  width: 120%;\r\n  height: 35px;\r\n}\r\n.vue-time-slot-column-header {\r\n  border: none !important;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  background-color: #ccc;\r\n  font-size: 12px;\r\n  padding: 10px 0;\r\n  color: #000;\r\n}\r\n.vue-time-slot-cell{\r\n  padding-top: 10px;\r\n  background-color: #fff;\r\n  border-style: solid;\r\n  border-color: #ccc;\r\n  border-width: 1px 1px 0 0;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #fff;\r\n  font-size: 13px;\r\n  height: 100%;\r\n}\r\n.vue-time-slot-cell:last-child{\r\n  border-width: 1px 1px 1px 0;\r\n}\r\n.vue-time-slot-cell:hover{\r\n  background-color: rgb(3, 105, 161);\r\n}\r\n.vue-time-slot-active-cell {\r\n  background-color: rgb(3, 105, 161);\r\n  color: #fff;\r\n}\r\n.vue-time-slot-active-cell:hover{\r\n  background-color: rgb(3, 105, 161);\r\n}\r\n.vue-time-slot-table-row-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 130px;\r\n}\r\n.vue-time-slot-day-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100px;\r\n}\r\n.vue-time-slot-calendar-table {\r\n  background-color: transparent;\r\n  overflow: auto;\r\n  white-space: nowrap;\r\n  width: 90%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n}\r\n.vue-time-slot-calendar-table .vue-time-slot-day-header:first-child{\r\n  border-style: solid;\r\n  border-color: #ccc;\r\n  border-width: 0 0 0 1px;\r\n}\r\n.arrow-block {\r\n  font-size: 25px;\r\n  font-weight: bolder;\r\n  color: #ef4144;\r\n  cursor: pointer;\r\n  margin: -10px 15px;\r\n}\r\n.selection {\r\n  width: 200px;\r\n  padding-right: 50px;\r\n}\r\n.selection .selected_slots{\r\n  list-style-type: none;\r\n  text-align: center;\r\n  font-size: 17px;\r\n  width: 100%;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}