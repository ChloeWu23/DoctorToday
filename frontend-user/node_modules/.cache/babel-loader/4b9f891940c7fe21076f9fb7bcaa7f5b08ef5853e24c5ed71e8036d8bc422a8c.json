{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { DayPilot, DayPilotNavigator } from '@daypilot/daypilot-lite-vue';\nlet selected_slots_count = 0;\nlet selection_count = 0;\n//let lastDate = null;\n\nexport default {\n  name: 'AvailabilityPicker',\n  props: {\n    min: {\n      type: Number,\n      default: 3\n    }\n  },\n  watch: {},\n  data: function () {\n    return {\n      events: [],\n      datePickerConfig: {\n        showMonths: 1,\n        skipMonths: 1,\n        // \"Day\" highlights the selected day\n        // \"Week\" highlights the week of the selected day\n        selectMode: \"Day\",\n        startDate: DayPilot.Date.today(),\n        selectionDay: DayPilot.Date.today(),\n        onTimeRangeSelected: args => {\n          this.datePickerConfig.selectionDay = args.day;\n          // get selected day from navigator\n          if (args.day >= DayPilot.Date.today()) {\n            this.calendarConfig.startDate = args.day;\n          }\n        },\n        //need to block past days\n        /*\r\n        onTimeRangeSelect: args => {\r\n            if (args.day < DayPilot.Date.today()) {\r\n                args.preventDefault();\r\n                //this.select(lastDate, {dontNotify: true, dontFocus: true});\r\n            } else {\r\n                lastDate = args.start;\r\n            }\r\n        },\r\n        */\n        onBeforeCellRender: args => {\n          //console.log(args.cell.day);\n          if (args.cell.day < DayPilot.Date.today()) {\n            args.cell.cssClass = \"navigator-disabled-cell\";\n          }\n        }\n      },\n      duration: 30,\n      // only 10, 15, 20, 30 allowed\n      open: 10,\n      // set openning hours\n      close: 18,\n      slotRange: [/*\r\n                  {\r\n                  label: \"13:40 - 14:00\",\r\n                  start_time: \"13:40:00\",\r\n                  end_time: \"14:00:00\"\r\n                  },*/\n      ],\n      dayIndex: [],\n      todaysDate: this.formatDate(new Date(), \"long\"),\n      dateIndex: 0,\n      selected_slots: []\n    };\n  },\n  components: {\n    //DayPilotCalendar,\n    DayPilotNavigator\n  },\n  computed: {\n    // DayPilot.Calendar object - https://api.daypilot.org/daypilot-calendar-class/\n    /* calendar() {\r\n         return this.$refs.calendar.control;\r\n     },\r\n     */\n    datePicker() {\n      return this.$refs.datePicker.control;\n    }\n  },\n  methods: {\n    loadEvents() {\n      // placeholder for an HTTP call\n      /*\r\n      const busy = [\r\n          {\r\n              id: 1,\r\n              start: \"2023-01-05T10:00:00\",\r\n              end: \"2023-01-05T11:00:00\",\r\n              text: \"busy\",\r\n              barColor: \"#6aa84f\",\r\n          },\r\n        ];\r\n      this.events = busy;\r\n      */\n    },\n    formatDate(date, type) {\n      let monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      var day = date.getDate();\n      var monthIndex = date.getMonth();\n      let month = type == \"short\" ? monthNames[monthIndex].slice(0, 3) : monthNames[monthIndex];\n      return {\n        label: date.toString().slice(0, 3) + \" \" + month + \" \" + day,\n        value: date.toString().slice(0, 16)\n      };\n    },\n    addDate() {\n      this.dayIndex.push(this.formatDate(this.nextDate(this.dateIndex), \"short\"));\n      this.dateIndex++;\n    },\n    nextDate(index) {\n      let year = this.datePickerConfig.selectionDay.toString().slice(0, 4);\n      let month = this.datePickerConfig.selectionDay.toString().slice(5, 7);\n      let day = this.datePickerConfig.selectionDay.toString().slice(8, 10);\n      let selected_date = new Date();\n      selected_date.setFullYear(year, month, day);\n      return new Date(selected_date.getTime() + index * 24 * 60 * 60 * 1000);\n    },\n    slot(event, value, day) {\n      // select up to three slots\n      // unselect a slot by clicking it\n      if (event.target.classList[1] != \"vue-time-slot-active-cell\" && selection_count <= 2) {\n        selection_count++;\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\n        value.date = day.value;\n        this.$emit(\"callback\", value);\n        let slot = {\n          label: value.label,\n          value: value.date\n        };\n        this.addSlot(slot);\n        return;\n      }\n      if (event.target.classList[1] == \"vue-time-slot-active-cell\") {\n        selection_count--;\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\n        value.date = day.value;\n        this.$emit(\"callback\", value);\n        let slot = {\n          label: value.label,\n          value: value.date\n        };\n        this.removeSlot(slot);\n      }\n    },\n    initSlotRange() {\n      // initialise dateRange with a duration of 20 min\n      let start = \"\";\n      let end = \"\";\n      for (let hour = this.open; hour < this.close; hour++) {\n        for (let min = 0; min < 60; min += this.duration) {\n          start = end;\n          if (min != 0) {\n            end = hour + \":\" + min;\n          } else {\n            end = hour + \":0\" + min;\n          }\n          let label = start + \" - \" + end;\n          let start_time = start + \":00\";\n          let end_time = end + \":00\";\n          let range = {\n            label,\n            start_time,\n            end_time\n          };\n          if (start != \"\") {\n            this.slotRange.push(range);\n          }\n        }\n      }\n      start = end;\n      end = this.close + \":00\";\n      let label = start + \" - \" + end;\n      let start_time = start + \":00\";\n      let end_time = end + \":00\";\n      let range = {\n        label,\n        start_time,\n        end_time\n      };\n      this.slotRange.push(range);\n    },\n    addSlot(slot) {\n      this.selected_slots.push(slot);\n    },\n    removeSlot(slot) {\n      // get all slot data and then get index of selected slot in list\n      let items = document.querySelectorAll(\".slots\");\n      let item = [];\n      for (let i = 0; i < items.length; i++) {\n        item.push(items[i].innerHTML);\n      }\n      let slot_info = slot.value + \" \" + slot.label;\n      let index = item.indexOf(slot_info);\n      this.selected_slots.splice(index, 1);\n    }\n    /*\r\n    blockSlot() {\r\n      }\r\n    */\n  },\n\n  mounted() {\n    this.loadEvents();\n    //2023-01-26T00:00:00'\n\n    //let todaysDate = new Date(new Date().getTime() + 0 * 24 * 60 * 60 * 1000);\n    for (let index = 0; index < this.min; index++) {\n      this.dayIndex.push(this.formatDate(this.nextDate(this.dateIndex), \"short\"));\n      this.dateIndex++;\n    }\n    this.initSlotRange();\n    console.log(DayPilot.Date.today());\n    //this.blockSlot();\n  }\n};","map":{"version":3,"mappings":"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","names":["DayPilot","DayPilotNavigator","selected_slots_count","selection_count","name","props","min","type","Number","default","watch","data","events","datePickerConfig","showMonths","skipMonths","selectMode","startDate","Date","today","selectionDay","onTimeRangeSelected","args","day","calendarConfig","onBeforeCellRender","cell","cssClass","duration","open","close","slotRange","dayIndex","todaysDate","formatDate","dateIndex","selected_slots","components","computed","datePicker","$refs","control","methods","loadEvents","date","monthNames","getDate","monthIndex","getMonth","month","slice","label","toString","value","addDate","push","nextDate","index","year","selected_date","setFullYear","getTime","slot","event","target","classList","toggle","$emit","addSlot","removeSlot","initSlotRange","start","end","hour","start_time","end_time","range","items","document","querySelectorAll","item","i","length","innerHTML","slot_info","indexOf","splice","mounted","console","log"],"sourceRoot":"","sources":["D:\\SED\\GroupProject\\DoctorToday\\frontend-user\\src\\components\\AvailabilityPicker.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n        <div class=\"left\">\r\n            <DayPilotNavigator id=\"nav\" :config=\"datePickerConfig\" ref=\"datePicker\" :events=\"events\" />\r\n        </div>\r\n        <!--<div class=\"content\">\r\n            <DayPilotCalendar id=\"dp\" :config=\"calendarConfig\" ref=\"calendar\" :events=\"events\" />\r\n        </div>-->\r\n        \r\n\r\n        <div class=\"slot_picker\" :config=\"slotPickerConfig\">\r\n    <div class=\"vue-time-slot-container\">\r\n      <div class=\"vue-time-slot-table-row-header\">\r\n        <span class=\"vue-time-slot-column-header\">Time</span>\r\n        <span class=\"vue-time-slot-row-header\" v-for=\"value in slotRange\" :key=\"value.label\">\r\n          {{value.label}}\r\n        </span>\r\n      </div>\r\n      <div class=\"vue-time-slot-calendar-table\" id=\"vue-time-slot-calendar-table\">\r\n        <div class=\"vue-time-slot-day-header\" v-for=\"day in dayIndex\" :key=\"day.label\">\r\n          <span class=\"vue-time-slot-column-header\">{{day.label}}</span>\r\n          <span class=\"vue-time-slot-cell\" v-for=\"value in slotRange\" :key=\"value.label\" @click=\"slot($event, value, day)\">\r\n            {{value.label}} \r\n          </span>\r\n        </div>\r\n      </div>\r\n<!--\r\n    <div class=\"selection\" id=\"selection\">\r\n        <ul class=\"selected_slots\">\r\n          <li class=\"slots\" v-for=\"(slot, index) in selected_slots\" :key='index'>{{slot.value}} {{slot.label}}</li>\r\n        </ul>\r\n      </div>\r\n    -->\r\n      \r\n\r\n    </div>\r\n  </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { DayPilot, DayPilotNavigator } from '@daypilot/daypilot-lite-vue'\r\n\r\n\r\nlet selected_slots_count = 0;\r\nlet selection_count = 0;\r\n//let lastDate = null;\r\n\r\nexport default {\r\n    name: 'AvailabilityPicker',\r\n    props: {\r\n    min: {\r\n      type: Number,\r\n      default: 3\r\n    }\r\n  },\r\n  watch: {},\r\n\r\n    data: function () {\r\n        return {\r\n            events: [],\r\n            datePickerConfig: {\r\n                showMonths: 1,\r\n                skipMonths: 1,\r\n                // \"Day\" highlights the selected day\r\n                // \"Week\" highlights the week of the selected day\r\n                selectMode: \"Day\",\r\n                startDate: DayPilot.Date.today(),\r\n                selectionDay: DayPilot.Date.today(),\r\n                onTimeRangeSelected: args => {\r\n                  this.datePickerConfig.selectionDay = args.day;\r\n                    // get selected day from navigator\r\n                    if (args.day >= DayPilot.Date.today()) {\r\n                        this.calendarConfig.startDate = args.day;\r\n                    }\r\n                },\r\n                \r\n                \r\n                //need to block past days\r\n                /*\r\n                onTimeRangeSelect: args => {\r\n                    if (args.day < DayPilot.Date.today()) {\r\n                        args.preventDefault();\r\n                        //this.select(lastDate, {dontNotify: true, dontFocus: true});\r\n                    } else {\r\n                        lastDate = args.start;\r\n                    }\r\n                },\r\n                */\r\n                onBeforeCellRender: args=> {\r\n                    //console.log(args.cell.day);\r\n                    if (args.cell.day < DayPilot.Date.today()) {\r\n                        args.cell.cssClass = \"navigator-disabled-cell\";\r\n                    }\r\n                },\r\n                \r\n                \r\n\r\n            },\r\n\r\n            \r\n            duration: 30, // only 10, 15, 20, 30 allowed\r\n            open: 10, // set openning hours\r\n            close: 18,      \r\n            slotRange: [/*\r\n            {\r\n            label: \"13:40 - 14:00\",\r\n            start_time: \"13:40:00\",\r\n            end_time: \"14:00:00\"\r\n            },*/\r\n            ],\r\n            dayIndex: [],\r\n            todaysDate: this.formatDate(new Date(), \"long\"),\r\n            dateIndex: 0,\r\n            selected_slots: [],\r\n            \r\n\r\n        }\r\n    },\r\n    \r\n\r\n    components: {\r\n        //DayPilotCalendar,\r\n        DayPilotNavigator\r\n    },\r\n\r\n\r\n    computed: {\r\n        // DayPilot.Calendar object - https://api.daypilot.org/daypilot-calendar-class/\r\n       /* calendar() {\r\n            return this.$refs.calendar.control;\r\n        },\r\n        */\r\n        datePicker() {\r\n            return this.$refs.datePicker.control;\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        loadEvents() {\r\n            // placeholder for an HTTP call\r\n            /*\r\n            const busy = [\r\n                {\r\n                    id: 1,\r\n                    start: \"2023-01-05T10:00:00\",\r\n                    end: \"2023-01-05T11:00:00\",\r\n                    text: \"busy\",\r\n                    barColor: \"#6aa84f\",\r\n                },\r\n\r\n            ];\r\n            this.events = busy;\r\n            */ \r\n        },\r\n        formatDate(date, type) {\r\n      let monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n      ];\r\n      var day = date.getDate();\r\n      var monthIndex = date.getMonth();\r\n      let month =\r\n        type == \"short\"\r\n          ? monthNames[monthIndex].slice(0, 3)\r\n          : monthNames[monthIndex];\r\n      return {\r\n        label: date.toString().slice(0, 3) + \" \" + month + \" \" + day,\r\n        value: date.toString().slice(0, 16),\r\n      };\r\n    },\r\n    addDate() {\r\n      this.dayIndex.push(\r\n        this.formatDate(this.nextDate(this.dateIndex), \"short\")\r\n      );\r\n      this.dateIndex++;\r\n    },\r\n    nextDate(index) {\r\n      let year = this.datePickerConfig.selectionDay.toString().slice(0, 4);\r\n      let month = this.datePickerConfig.selectionDay.toString().slice(5, 7);\r\n      let day = this.datePickerConfig.selectionDay.toString().slice(8, 10);\r\n      let selected_date = new Date();\r\n      selected_date.setFullYear(year, month, day);\r\n      return new Date(selected_date.getTime() + index * 24 * 60 * 60 * 1000);\r\n    },\r\n    slot(event, value, day) {\r\n      // select up to three slots\r\n      // unselect a slot by clicking it\r\n      if (event.target.classList[1] != \"vue-time-slot-active-cell\" && selection_count <=2) {\r\n        selection_count++;\r\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\r\n        value.date = day.value;\r\n        this.$emit(\"callback\", value);\r\n        let slot = {label: value.label, value: value.date};\r\n        this.addSlot(slot);\r\n        return;\r\n      } \r\n      if (event.target.classList[1] == \"vue-time-slot-active-cell\") {\r\n        selection_count--;\r\n        event.target.classList.toggle(\"vue-time-slot-active-cell\");\r\n        value.date = day.value;\r\n        this.$emit(\"callback\", value);\r\n        let slot = {label: value.label, value: value.date};\r\n        this.removeSlot(slot);\r\n      }\r\n    },\r\n    initSlotRange() {\r\n    // initialise dateRange with a duration of 20 min\r\n      let start = \"\";\r\n      let end = \"\";\r\n    \r\n      for (let hour = this.open; hour < this.close; hour++) {\r\n        for (let min = 0; min <60; min += this.duration) {\r\n          start = end;\r\n          if(min != 0) {\r\n            end = hour + \":\" + min;\r\n          } else {\r\n            end = hour + \":0\" + min\r\n          }\r\n          let label = start + \" - \" + end;\r\n          let start_time = start + \":00\";\r\n          let end_time = end + \":00\";\r\n          let range = {label, start_time, end_time};\r\n          if (start != \"\") {\r\n            this.slotRange.push(range);\r\n          }\r\n        }\r\n      }\r\n      start = end;\r\n      end = this.close + \":00\";\r\n      let label = start + \" - \" + end;\r\n      let start_time = start + \":00\";\r\n      let end_time = end + \":00\";\r\n      let range = {label, start_time, end_time};\r\n      this.slotRange.push(range);\r\n    },\r\n    addSlot(slot) {\r\n      this.selected_slots.push(slot);\r\n    },\r\n    removeSlot(slot) {\r\n    // get all slot data and then get index of selected slot in list\r\n    let items = document.querySelectorAll(\".slots\");\r\n    let item = [];\r\n    for (let i = 0; i < items.length; i++) {\r\n      item.push(items[i].innerHTML);\r\n    }\r\n    let slot_info = slot.value + \" \" + slot.label;\r\n    let index = item.indexOf(slot_info);\r\n    this.selected_slots.splice(index, 1);\r\n    },\r\n    /*\r\n    blockSlot() {\r\n\r\n    }\r\n    */\r\n\r\n\r\n\r\n    },\r\n    mounted() {\r\n        this.loadEvents();\r\n        //2023-01-26T00:00:00'\r\n\r\n    //let todaysDate = new Date(new Date().getTime() + 0 * 24 * 60 * 60 * 1000);\r\n        for (let index = 0; index < this.min; index++) {\r\n      this.dayIndex.push(\r\n        this.formatDate(this.nextDate(this.dateIndex), \"short\")\r\n      );\r\n      this.dateIndex++;\r\n    }\r\n\r\n    this.initSlotRange();\r\n    console.log(DayPilot.Date.today());\r\n    //this.blockSlot();\r\n\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.wrap {\r\n    display: flex;\r\n}\r\n.left {\r\n    margin-right: 10px;\r\n}\r\n\r\n.content {\r\n    flex-grow: 1;\r\n}\r\n/*\r\n.calendar_default_event_inner {\r\n    border-radius: 5px;\r\n}\r\n*/\r\n.navigator_default_busy.navigator_default_cell {\r\n    background-color: #ee4f2e;\r\n    border-radius: 15px;\r\n    color: white;\r\n}\r\n\r\n.navigator_default_select {\r\n    color: white;\r\n}\r\n.navigator_default_select .navigator_default_cell_box {\r\n    background-color: rgb(3, 105, 161);\r\n    border-radius: 50%;\r\n    opacity: 1;\r\n}\r\n\r\n.navigator_default_todaybox {\r\n    border: 2px solid rgb(3, 105, 161);\r\n    border-radius: 50%;\r\n}\r\n\r\n.navigator_default_title, .navigator_default_titleleft, .navigator_default_titleright {\r\n    background-color: rgb(3, 105, 161);\r\n    color: white;\r\n    font-size: 110%;\r\n}\r\n.navigator_default_cell.navigator-disabled-cell {\r\n  background-color: #ddd !important;\r\n  color: #888;\r\n  cursor: not-allowed !important;\r\n}\r\n\r\n.vue-time-slot-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  font-size: 13px;\r\n  padding-left: 50px;\r\n}\r\n.vue-time-slot-row-header {\r\n  border: none !important;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  background-color: #ccc;\r\n  font-size: 12px;\r\n  padding: 7px;\r\n  color: #000;\r\n  width: 120%;\r\n  height: 35px;\r\n}\r\n.vue-time-slot-column-header {\r\n  border: none !important;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  background-color: #ccc;\r\n  font-size: 12px;\r\n  padding: 10px 0;\r\n  color: #000;\r\n}\r\n.vue-time-slot-cell{\r\n  padding-top: 10px;\r\n  background-color: #fff;\r\n  border-style: solid;\r\n  border-color: #ccc;\r\n  border-width: 1px 1px 0 0;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #fff;\r\n  font-size: 13px;\r\n  height: 100%;\r\n}\r\n.vue-time-slot-cell:last-child{\r\n  border-width: 1px 1px 1px 0;\r\n}\r\n.vue-time-slot-cell:hover{\r\n  background-color: rgb(3, 105, 161);\r\n}\r\n.vue-time-slot-active-cell {\r\n  background-color: rgb(3, 105, 161);\r\n  color: #fff;\r\n}\r\n.vue-time-slot-active-cell:hover{\r\n  background-color: rgb(3, 105, 161);\r\n}\r\n.vue-time-slot-table-row-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 130px;\r\n}\r\n.vue-time-slot-day-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100px;\r\n}\r\n.vue-time-slot-calendar-table {\r\n  background-color: transparent;\r\n  overflow: auto;\r\n  white-space: nowrap;\r\n  width: 90%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n}\r\n.vue-time-slot-calendar-table .vue-time-slot-day-header:first-child{\r\n  border-style: solid;\r\n  border-color: #ccc;\r\n  border-width: 0 0 0 1px;\r\n}\r\n.arrow-block {\r\n  font-size: 25px;\r\n  font-weight: bolder;\r\n  color: #ef4144;\r\n  cursor: pointer;\r\n  margin: -10px 15px;\r\n}\r\n.selection {\r\n  width: 200px;\r\n  padding-right: 50px;\r\n}\r\n.selection .selected_slots{\r\n  list-style-type: none;\r\n  text-align: center;\r\n  font-size: 17px;\r\n  width: 100%;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}